// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Project extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Project entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Project entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Project", id.toString(), this);
  }

  static load(id: string): Project | null {
    return store.get("Project", id) as Project | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get holder(): Bytes {
    let value = this.get("holder");
    return value.toBytes();
  }

  set holder(value: Bytes) {
    this.set("holder", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }
}

export class ProjectVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProjectVote entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProjectVote entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProjectVote", id.toString(), this);
  }

  static load(id: string): ProjectVote | null {
    return store.get("ProjectVote", id) as ProjectVote | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ProjectId(): BigInt {
    let value = this.get("ProjectId");
    return value.toBigInt();
  }

  set ProjectId(value: BigInt) {
    this.set("ProjectId", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get begin(): BigInt {
    let value = this.get("begin");
    return value.toBigInt();
  }

  set begin(value: BigInt) {
    this.set("begin", Value.fromBigInt(value));
  }

  get voteMax(): BigInt {
    let value = this.get("voteMax");
    return value.toBigInt();
  }

  set voteMax(value: BigInt) {
    this.set("voteMax", Value.fromBigInt(value));
  }

  get voteYes(): BigInt {
    let value = this.get("voteYes");
    return value.toBigInt();
  }

  set voteYes(value: BigInt) {
    this.set("voteYes", Value.fromBigInt(value));
  }

  get voteNo(): BigInt {
    let value = this.get("voteNo");
    return value.toBigInt();
  }

  set voteNo(value: BigInt) {
    this.set("voteNo", Value.fromBigInt(value));
  }
}
