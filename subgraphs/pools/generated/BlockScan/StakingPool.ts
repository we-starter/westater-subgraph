// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GovernorshipTransferred extends ethereum.Event {
  get params(): GovernorshipTransferred__Params {
    return new GovernorshipTransferred__Params(this);
  }
}

export class GovernorshipTransferred__Params {
  _event: GovernorshipTransferred;

  constructor(event: GovernorshipTransferred) {
    this._event = event;
  }

  get previousGovernor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newGovernor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardAdded extends ethereum.Event {
  get params(): RewardAdded__Params {
    return new RewardAdded__Params(this);
  }
}

export class RewardAdded__Params {
  _event: RewardAdded;

  constructor(event: RewardAdded) {
    this._event = event;
  }

  get reward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardPaid extends ethereum.Event {
  get params(): RewardPaid__Params {
    return new RewardPaid__Params(this);
  }
}

export class RewardPaid__Params {
  _event: RewardPaid;

  constructor(event: RewardPaid) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardPaid2 extends ethereum.Event {
  get params(): RewardPaid2__Params {
    return new RewardPaid2__Params(this);
  }
}

export class RewardPaid2__Params {
  _event: RewardPaid2;

  constructor(event: RewardPaid2) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward2(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakingPool extends ethereum.SmartContract {
  static bind(address: Address): StakingPool {
    return new StakingPool("StakingPool", address);
  }

  APY(): BigInt {
    let result = super.call("APY", "APY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_APY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("APY", "APY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TVL(): BigInt {
    let result = super.call("TVL", "TVL():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TVL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("TVL", "TVL():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  begin(): BigInt {
    let result = super.call("begin", "begin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_begin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("begin", "begin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earned(account: Address): BigInt {
    let result = super.call("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_earned(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConfig(key: Bytes): BigInt {
    let result = super.call("getConfig", "getConfig(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(key)
    ]);

    return result[0].toBigInt();
  }

  try_getConfig(key: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getConfig", "getConfig(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(key)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConfigA(key: Bytes, addr: Address): BigInt {
    let result = super.call(
      "getConfigA",
      "getConfigA(bytes32,address):(uint256)",
      [ethereum.Value.fromFixedBytes(key), ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_getConfigA(key: Bytes, addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getConfigA",
      "getConfigA(bytes32,address):(uint256)",
      [ethereum.Value.fromFixedBytes(key), ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConfigI(key: Bytes, index: BigInt): BigInt {
    let result = super.call(
      "getConfigI",
      "getConfigI(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(key),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getConfigI(key: Bytes, index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getConfigI",
      "getConfigI(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(key),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardForDuration(): BigInt {
    let result = super.call(
      "getRewardForDuration",
      "getRewardForDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRewardForDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardForDuration",
      "getRewardForDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governor(): Address {
    let result = super.call("governor", "governor():(address)", []);

    return result[0].toAddress();
  }

  try_governor(): ethereum.CallResult<Address> {
    let result = super.tryCall("governor", "governor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastTimeRewardApplicable(): BigInt {
    let result = super.call(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastTimeRewardApplicable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdateTime(): BigInt {
    let result = super.call("lastUpdateTime", "lastUpdateTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastUpdateTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdateTime",
      "lastUpdateTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lep(): BigInt {
    let result = super.call("lep", "lep():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lep(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lep", "lep():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lptValue(vol: BigInt): BigInt {
    let result = super.call("lptValue", "lptValue(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vol)
    ]);

    return result[0].toBigInt();
  }

  try_lptValue(vol: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lptValue", "lptValue(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vol)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lptValueTotal(): BigInt {
    let result = super.call("lptValueTotal", "lptValueTotal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lptValueTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lptValueTotal",
      "lptValueTotal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paid(param0: Address): BigInt {
    let result = super.call("paid", "paid(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_paid(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("paid", "paid(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periodFinish(): BigInt {
    let result = super.call("periodFinish", "periodFinish():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodFinish(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodFinish", "periodFinish():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardDelta(): BigInt {
    let result = super.call("rewardDelta", "rewardDelta():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardDelta(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardDelta", "rewardDelta():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerToken(): BigInt {
    let result = super.call("rewardPerToken", "rewardPerToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardPerToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerToken",
      "rewardPerToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerTokenStored(): BigInt {
    let result = super.call(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerTokenStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardRate(): BigInt {
    let result = super.call("rewardRate", "rewardRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardRate", "rewardRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards(param0: Address): BigInt {
    let result = super.call("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_rewards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards2Ratio(): BigInt {
    let result = super.call("rewards2Ratio", "rewards2Ratio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewards2Ratio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewards2Ratio",
      "rewards2Ratio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards2Token(): Address {
    let result = super.call("rewards2Token", "rewards2Token():(address)", []);

    return result[0].toAddress();
  }

  try_rewards2Token(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewards2Token",
      "rewards2Token():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardsDistribution(): Address {
    let result = super.call(
      "rewardsDistribution",
      "rewardsDistribution():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_rewardsDistribution(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardsDistribution",
      "rewardsDistribution():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardsDuration(): BigInt {
    let result = super.call(
      "rewardsDuration",
      "rewardsDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardsDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsDuration",
      "rewardsDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsToken(): Address {
    let result = super.call("rewardsToken", "rewardsToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardsToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardsToken", "rewardsToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingToken(): Address {
    let result = super.call("stakingToken", "stakingToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakingToken", "stakingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapValue(vol: BigInt, path: Array<Address>): BigInt {
    let result = super.call(
      "swapValue",
      "swapValue(uint256,address[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(vol),
        ethereum.Value.fromAddressArray(path)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapValue(
    vol: BigInt,
    path: Array<Address>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapValue",
      "swapValue(uint256,address[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(vol),
        ethereum.Value.fromAddressArray(path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRewardPerTokenPaid(param0: Address): BigInt {
    let result = super.call(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userRewardPerTokenPaid(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class __Governable_init_unchainedCall extends ethereum.Call {
  get inputs(): __Governable_init_unchainedCall__Inputs {
    return new __Governable_init_unchainedCall__Inputs(this);
  }

  get outputs(): __Governable_init_unchainedCall__Outputs {
    return new __Governable_init_unchainedCall__Outputs(this);
  }
}

export class __Governable_init_unchainedCall__Inputs {
  _call: __Governable_init_unchainedCall;

  constructor(call: __Governable_init_unchainedCall) {
    this._call = call;
  }

  get governor_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class __Governable_init_unchainedCall__Outputs {
  _call: __Governable_init_unchainedCall;

  constructor(call: __Governable_init_unchainedCall) {
    this._call = call;
  }
}

export class __StakingPool_initCall extends ethereum.Call {
  get inputs(): __StakingPool_initCall__Inputs {
    return new __StakingPool_initCall__Inputs(this);
  }

  get outputs(): __StakingPool_initCall__Outputs {
    return new __StakingPool_initCall__Outputs(this);
  }
}

export class __StakingPool_initCall__Inputs {
  _call: __StakingPool_initCall;

  constructor(call: __StakingPool_initCall) {
    this._call = call;
  }

  get _governor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardsDistribution(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewardsToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stakingToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _ecoAddr(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class __StakingPool_initCall__Outputs {
  _call: __StakingPool_initCall;

  constructor(call: __StakingPool_initCall) {
    this._call = call;
  }
}

export class __StakingPool_init_unchainedCall extends ethereum.Call {
  get inputs(): __StakingPool_init_unchainedCall__Inputs {
    return new __StakingPool_init_unchainedCall__Inputs(this);
  }

  get outputs(): __StakingPool_init_unchainedCall__Outputs {
    return new __StakingPool_init_unchainedCall__Outputs(this);
  }
}

export class __StakingPool_init_unchainedCall__Inputs {
  _call: __StakingPool_init_unchainedCall;

  constructor(call: __StakingPool_init_unchainedCall) {
    this._call = call;
  }

  get _rewardsDistribution(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardsToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stakingToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _ecoAddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class __StakingPool_init_unchainedCall__Outputs {
  _call: __StakingPool_init_unchainedCall;

  constructor(call: __StakingPool_init_unchainedCall) {
    this._call = call;
  }
}

export class __StakingRewards_initCall extends ethereum.Call {
  get inputs(): __StakingRewards_initCall__Inputs {
    return new __StakingRewards_initCall__Inputs(this);
  }

  get outputs(): __StakingRewards_initCall__Outputs {
    return new __StakingRewards_initCall__Outputs(this);
  }
}

export class __StakingRewards_initCall__Inputs {
  _call: __StakingRewards_initCall;

  constructor(call: __StakingRewards_initCall) {
    this._call = call;
  }

  get _rewardsDistribution(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardsToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stakingToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class __StakingRewards_initCall__Outputs {
  _call: __StakingRewards_initCall;

  constructor(call: __StakingRewards_initCall) {
    this._call = call;
  }
}

export class __StakingRewards_init_unchainedCall extends ethereum.Call {
  get inputs(): __StakingRewards_init_unchainedCall__Inputs {
    return new __StakingRewards_init_unchainedCall__Inputs(this);
  }

  get outputs(): __StakingRewards_init_unchainedCall__Outputs {
    return new __StakingRewards_init_unchainedCall__Outputs(this);
  }
}

export class __StakingRewards_init_unchainedCall__Inputs {
  _call: __StakingRewards_init_unchainedCall;

  constructor(call: __StakingRewards_init_unchainedCall) {
    this._call = call;
  }

  get _rewardsDistribution(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardsToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stakingToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class __StakingRewards_init_unchainedCall__Outputs {
  _call: __StakingRewards_init_unchainedCall;

  constructor(call: __StakingRewards_init_unchainedCall) {
    this._call = call;
  }
}

export class CompoundCall extends ethereum.Call {
  get inputs(): CompoundCall__Inputs {
    return new CompoundCall__Inputs(this);
  }

  get outputs(): CompoundCall__Outputs {
    return new CompoundCall__Outputs(this);
  }
}

export class CompoundCall__Inputs {
  _call: CompoundCall;

  constructor(call: CompoundCall) {
    this._call = call;
  }
}

export class CompoundCall__Outputs {
  _call: CompoundCall;

  constructor(call: CompoundCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class GetRewardACall extends ethereum.Call {
  get inputs(): GetRewardACall__Inputs {
    return new GetRewardACall__Inputs(this);
  }

  get outputs(): GetRewardACall__Outputs {
    return new GetRewardACall__Outputs(this);
  }
}

export class GetRewardACall__Inputs {
  _call: GetRewardACall;

  constructor(call: GetRewardACall) {
    this._call = call;
  }

  get acct(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetRewardACall__Outputs {
  _call: GetRewardACall;

  constructor(call: GetRewardACall) {
    this._call = call;
  }
}

export class NotifyReward2Call extends ethereum.Call {
  get inputs(): NotifyReward2Call__Inputs {
    return new NotifyReward2Call__Inputs(this);
  }

  get outputs(): NotifyReward2Call__Outputs {
    return new NotifyReward2Call__Outputs(this);
  }
}

export class NotifyReward2Call__Inputs {
  _call: NotifyReward2Call;

  constructor(call: NotifyReward2Call) {
    this._call = call;
  }

  get _rewards2Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ratio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _begin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class NotifyReward2Call__Outputs {
  _call: NotifyReward2Call;

  constructor(call: NotifyReward2Call) {
    this._call = call;
  }
}

export class NotifyRewardAmountCall extends ethereum.Call {
  get inputs(): NotifyRewardAmountCall__Inputs {
    return new NotifyRewardAmountCall__Inputs(this);
  }

  get outputs(): NotifyRewardAmountCall__Outputs {
    return new NotifyRewardAmountCall__Outputs(this);
  }
}

export class NotifyRewardAmountCall__Inputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }

  get reward(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class NotifyRewardAmountCall__Outputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }
}

export class NotifyRewardBeginCall extends ethereum.Call {
  get inputs(): NotifyRewardBeginCall__Inputs {
    return new NotifyRewardBeginCall__Inputs(this);
  }

  get outputs(): NotifyRewardBeginCall__Outputs {
    return new NotifyRewardBeginCall__Outputs(this);
  }
}

export class NotifyRewardBeginCall__Inputs {
  _call: NotifyRewardBeginCall;

  constructor(call: NotifyRewardBeginCall) {
    this._call = call;
  }

  get _lep(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _span(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _begin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class NotifyRewardBeginCall__Outputs {
  _call: NotifyRewardBeginCall;

  constructor(call: NotifyRewardBeginCall) {
    this._call = call;
  }
}

export class RenounceGovernorshipCall extends ethereum.Call {
  get inputs(): RenounceGovernorshipCall__Inputs {
    return new RenounceGovernorshipCall__Inputs(this);
  }

  get outputs(): RenounceGovernorshipCall__Outputs {
    return new RenounceGovernorshipCall__Outputs(this);
  }
}

export class RenounceGovernorshipCall__Inputs {
  _call: RenounceGovernorshipCall;

  constructor(call: RenounceGovernorshipCall) {
    this._call = call;
  }
}

export class RenounceGovernorshipCall__Outputs {
  _call: RenounceGovernorshipCall;

  constructor(call: RenounceGovernorshipCall) {
    this._call = call;
  }
}

export class SetConfigCall extends ethereum.Call {
  get inputs(): SetConfigCall__Inputs {
    return new SetConfigCall__Inputs(this);
  }

  get outputs(): SetConfigCall__Outputs {
    return new SetConfigCall__Outputs(this);
  }
}

export class SetConfigCall__Inputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetConfigCall__Outputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }
}

export class SetConfigACall extends ethereum.Call {
  get inputs(): SetConfigACall__Inputs {
    return new SetConfigACall__Inputs(this);
  }

  get outputs(): SetConfigACall__Outputs {
    return new SetConfigACall__Outputs(this);
  }
}

export class SetConfigACall__Inputs {
  _call: SetConfigACall;

  constructor(call: SetConfigACall) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetConfigACall__Outputs {
  _call: SetConfigACall;

  constructor(call: SetConfigACall) {
    this._call = call;
  }
}

export class SetConfigICall extends ethereum.Call {
  get inputs(): SetConfigICall__Inputs {
    return new SetConfigICall__Inputs(this);
  }

  get outputs(): SetConfigICall__Outputs {
    return new SetConfigICall__Outputs(this);
  }
}

export class SetConfigICall__Inputs {
  _call: SetConfigICall;

  constructor(call: SetConfigICall) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetConfigICall__Outputs {
  _call: SetConfigICall;

  constructor(call: SetConfigICall) {
    this._call = call;
  }
}

export class SetPathCall extends ethereum.Call {
  get inputs(): SetPathCall__Inputs {
    return new SetPathCall__Inputs(this);
  }

  get outputs(): SetPathCall__Outputs {
    return new SetPathCall__Outputs(this);
  }
}

export class SetPathCall__Inputs {
  _call: SetPathCall;

  constructor(call: SetPathCall) {
    this._call = call;
  }

  get swapFactory_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pathTVL_(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get pathAPY_(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class SetPathCall__Outputs {
  _call: SetPathCall;

  constructor(call: SetPathCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeWithPermitCall extends ethereum.Call {
  get inputs(): StakeWithPermitCall__Inputs {
    return new StakeWithPermitCall__Inputs(this);
  }

  get outputs(): StakeWithPermitCall__Outputs {
    return new StakeWithPermitCall__Outputs(this);
  }
}

export class StakeWithPermitCall__Inputs {
  _call: StakeWithPermitCall;

  constructor(call: StakeWithPermitCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class StakeWithPermitCall__Outputs {
  _call: StakeWithPermitCall;

  constructor(call: StakeWithPermitCall) {
    this._call = call;
  }
}

export class TransferGovernorshipCall extends ethereum.Call {
  get inputs(): TransferGovernorshipCall__Inputs {
    return new TransferGovernorshipCall__Inputs(this);
  }

  get outputs(): TransferGovernorshipCall__Outputs {
    return new TransferGovernorshipCall__Outputs(this);
  }
}

export class TransferGovernorshipCall__Inputs {
  _call: TransferGovernorshipCall;

  constructor(call: TransferGovernorshipCall) {
    this._call = call;
  }

  get newGovernor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferGovernorshipCall__Outputs {
  _call: TransferGovernorshipCall;

  constructor(call: TransferGovernorshipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
